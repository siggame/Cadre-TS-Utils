"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsdGFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhZHJlL2RlbHRhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVW5rbm93bk9iamVjdCB9IGZyb20gXCIuLi90eXBlcy91bmtub3duLW9iamVjdFwiO1xuaW1wb3J0IHsgSUJhc2VHYW1lIH0gZnJvbSBcIi4vYmFzZS1nYW1lXCI7XG5pbXBvcnQgeyBJR2FtZU9iamVjdFJlZmVyZW5jZSB9IGZyb20gXCIuL2Jhc2UtZ2FtZS1vYmplY3RcIjtcbmltcG9ydCB7IFJ1bkV2ZW50IH0gZnJvbSBcIi4vZXZlbnRzL2NsaWVudFwiO1xuaW1wb3J0IHsgT3JkZXJFdmVudCB9IGZyb20gXCIuL2V2ZW50cy9zZXJ2ZXJcIjtcblxuLyoqXG4gKiBUaGUgYmFzZSBzaGFwZSBhbGwgZGVsdGFzIGltcGxpbWVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmFzZURlbHRhIHtcbiAgICAvKiogVGhlIHR5cGUgb2YgZGVsdGEsIG9yIHJlYXNvbiBpdCBvY2N1cnJlZCAqL1xuICAgIHR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIE1ldGEgZGF0YSBhYm91dCB3aHkgdGhlIGRlbHRhIG9jY3VycmVkLCBzdWNoIGFzIGRhdGEgc2VudCB0byB0aGUgc2VydmVyXG4gICAgICogZnJvbSBhIGdhbWUgY2xpZW50XG4gICAgICovXG4gICAgZGF0YT86IG9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0ZSBvZiB0aGUgZ2FtZSwgYnV0IE9OTFkgY2hhbmdlZCBrZXlzLlxuICAgICAqXG4gICAgICogQSBnYW1lIGRlbHRhIGlzIHByb2JhYmx5IHRoZSBtb3N0IGNvbXBsZXggcGFydCBvZiB1bmRlcnN0YW5kaW5nXG4gICAgICogY29tbXVuaWNhdGlvbiBpbiB0aGUgY2FkcmUgZnJhbWV3b3JrLiBSZWZlciB0byB0aGVzZSBkb2NzIGZvciBtb3JlIGhlbHA6XG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL3NpZ2dhbWUvQ2FkcmUvYmxvYi9tYXN0ZXIvZ2FtZWxvZy1mb3JtYXQubWQjZGVsdGFzXG4gICAgICovXG4gICAgZ2FtZTogUGFydGlhbDxJQmFzZUdhbWUgJiBVbmtub3duT2JqZWN0Pjtcbn1cblxuLyoqXG4gKiBBbHdheXMgdGhlIGZpcnN0IGRlbHRhIGluIGEgZ2FtZSwgb2NjdXJzIHdoZW4gdGhlIGdhbWUgc3RhcnRzLlxuICpcbiAqIEFuIG9yZGVyIGRlbHRhIHNob3VsZCBmb2xsb3cuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXJ0RGVsdGEgZXh0ZW5kcyBJQmFzZURlbHRhIHtcbiAgICAvKiogVGhlIHR5cGUgb2YgZGVsdGEsIG9yIHJlYXNvbiBpdCBvY2N1cnJlZCAqL1xuICAgIHR5cGU6IFwic3RhcnRcIjtcblxuICAgIC8qKiBObyBkYXRhIGZvciBzdGFydCBkZWx0YXMuICovXG4gICAgZGF0YTogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIERhdGEgYWJvdXQgYSBwbGF5ZXIgYmVpbmcgb3JkZXJlZCB0byBkbyBzb21ldGhpbmcuXG4gKlxuICogTk9URTogdGhpcyBtZWFucyBhbiBvcmRlciB3YXMgc2VudCwgbm90IGZpbmlzaGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElPcmRlckRlbHRhIGV4dGVuZHMgSUJhc2VEZWx0YSB7XG4gICAgLyoqIFRoZSB0eXBlIG9mIGRlbHRhLCBvciByZWFzb24gaXQgb2NjdXJyZWQgKi9cbiAgICB0eXBlOiBcIm9yZGVyXCI7XG5cbiAgICAvKiogRGF0YSBhYm91dCB3aHkgdGhlIG9yZGVyIG9jY3VyZWQuICovXG4gICAgZGF0YToge1xuICAgICAgICAvKiogVGhlIHBsYXllciB0aGF0IHdhcyBvcmRlcmVkLiAqL1xuICAgICAgICBwbGF5ZXI6IElHYW1lT2JqZWN0UmVmZXJlbmNlO1xuXG4gICAgICAgIC8qKiBUaGUgb3JkZXIgZGF0YSB0aGV5IHdlcmUgc2VudC4gKi9cbiAgICAgICAgb3JkZXI6IE9yZGVyRXZlbnRbXCJkYXRhXCJdO1xuICAgIH07XG59XG5cbi8qKiBEZWx0YSBhYm91dCB3aGF0IGdhbWUgbG9naWMgZ290IHJhbi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJhbkRlbHRhIGV4dGVuZHMgSUJhc2VEZWx0YSB7XG4gICAgLyoqIFRoZSB0eXBlIG9mIGRlbHRhLCBvciByZWFzb24gaXQgb2NjdXJyZWQgKi9cbiAgICB0eXBlOiBcInJhblwiO1xuXG4gICAgLyoqIERhdGEgYWJvdXQgd2h5IHRoZSBydW4vcmFuIG9jY3VyZWQuICovXG4gICAgZGF0YToge1xuICAgICAgICAvKiogVGhlIHBsYXllciB0aGF0IHJlcXVlc3RlZCB0aGlzIGdhbWUgbG9naWMgYmUgcmFuLiAqL1xuICAgICAgICBwbGF5ZXI6IElHYW1lT2JqZWN0UmVmZXJlbmNlO1xuXG4gICAgICAgIC8qKiBUaGUgZGF0YSBhYm91dCB3aGF0IHdhcyByZXF1ZXN0ZWQgYmUgcnVuLiAqL1xuICAgICAgICBydW46IFJ1bkV2ZW50W1wiZGF0YVwiXTtcblxuICAgICAgICAvKiogQSBodW1hbiByZWFkYWJsZSBzdHJpbmcgZXhwbGFpbmluZyB3aHkgdGhpcyBydW4gd2FzIGludmFsaWQuICovXG4gICAgICAgIGludmFsaWQ/OiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBydW4gZnVuY3Rpb24gZnJvbSB0aGUgZ2FtZSBzZXJ2ZXJcbiAgICAgICAgICogdG8gdGhlIGdhbWUgY2xpZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuZWQ6IHVua25vd247XG4gICAgfTtcbn1cblxuLyoqIERhdGEgYm91dCBhIHBsYXllciBmaW5pc2hpbmcgYW4gb3JkZXIuICovXG5leHBvcnQgaW50ZXJmYWNlIElGaW5pc2hlZERlbHRhIGV4dGVuZHMgSUJhc2VEZWx0YSB7XG4gICAgLyoqIFRoZSB0eXBlIG9mIGRlbHRhLCBvciByZWFzb24gaXQgb2NjdXJyZWQgKi9cbiAgICB0eXBlOiBcImZpbmlzaGVkXCI7XG5cbiAgICAvKiogRGF0YSBhYm91dCB3aGF0IG9yZGVyIHRoZXkgZmluaXNoZWQuICovXG4gICAgZGF0YToge1xuICAgICAgICAvKiogVGhlIHBsYXllciB0aGF0IHNhaWQgdGhleSBmaW5pc2hlZCBhbiBvcmRlci4gKi9cbiAgICAgICAgcGxheWVyOiBJR2FtZU9iamVjdFJlZmVyZW5jZTtcblxuICAgICAgICAvKiogVGhlIGRhdGEgYWJvdXQgdGhlIG9yZGVyIHRoZXkgZmluaXNoZWQuICovXG4gICAgICAgIG9yZGVyOiBPcmRlckV2ZW50W1wiZGF0YVwiXTtcblxuICAgICAgICAvKiogQW4gb3B0aW9uYWwgcmV0dXJuIHZhbHVlIHRoZXkgcmV0dXJuZWQuICovXG4gICAgICAgIHJldHVybmVkPzogdW5rbm93bjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBtZXNzYWdlIHRvIHRoZSBodW1hbiBwbGF5ZXIgYXMgdG8gd2h5IHdoYXQgdGhleSBmaW5pc2hlZFxuICAgICAgICAgKiAocHJvYmFibHkgdGhlIHJldHVybmVkIHZhbHVlKSBpcyBpbnZhbGlkLlxuICAgICAgICAgKi9cbiAgICAgICAgaW52YWxpZD86IHN0cmluZztcbiAgICB9O1xufVxuXG4vKipcbiAqIERlbHRhIGFib3V0IHdoeSBhIHBsYXllciBkaXNjb25uZWN0ZWQuXG4gKlxuICogVGhpcyBkb2VzIG5vdCBvY2N1ciBpZiBib3RoIEFJcyBwbGF5IGEgZ2FtZSBjb3JyZWN0bHkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURpc2Nvbm5lY3REZWx0YSBleHRlbmRzIElCYXNlRGVsdGEge1xuICAgIC8qKiBUaGUgdHlwZSBvZiBkZWx0YSwgb3IgcmVhc29uIGl0IG9jY3VycmVkICovXG4gICAgdHlwZTogXCJkaXNjb25uZWN0XCI7XG5cbiAgICAvKiogRGF0YSBhYm91dCB3aHkgdGhlIGRpc2Nvbm5lY3Qgb2NjdXJlZC4gKi9cbiAgICBkYXRhOiB7XG4gICAgICAgIC8qKiBUaGUgcGxheWVyIHRoYXQgZGlzY29ubmVjdGVkICovXG4gICAgICAgIHBsYXllcjogSUdhbWVPYmplY3RSZWZlcmVuY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXkgZGlzY29ubmVjdGVkIGJlY2F1c2UgdGhleSB0aW1lZCBvdXQsIGFuZCB0aGUgZ2FtZSBzZXJ2ZXIgd2FzXG4gICAgICAgICAqIGZvcmNlZCB0byBkaXNjb25uZWN0IHRoZW0sIG9yIGlmIHRoZWlyIGVuZCBkaXNjb25uZWN0ZWQgdW5leHBlY3RlZGx5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGltZW91dDogYm9vbGVhbjtcbiAgICB9O1xufVxuXG4vKiogQWx3YXlzIHRoZSBsYXN0IGRlbHRhIGluIGEgZ2FtZSwgb2NjdXJzIHdoZW4gdGhlIGdhbWUgaXMgb3Zlci4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU92ZXJEZWx0YSBleHRlbmRzIElCYXNlRGVsdGEge1xuICAgIC8qKiBUaGUgdHlwZSBvZiBkZWx0YSwgb3IgcmVhc29uIGl0IG9jY3VycmVkICovXG4gICAgdHlwZTogXCJvdmVyXCI7XG5cbiAgICAvKiogTm8gZGF0YSBmb3Igb3ZlciBkZWx0YXMuICovXG4gICAgZGF0YTogdW5kZWZpbmVkO1xufVxuXG4vKiogQSBEZWx0YSBpbiB0aGUgZ2FtZS4gRWFjaCBkZWx0YSBpcyBleHBlY3RlZCB0byBiZSBvbmUgb2YgdGhlc2UgdHlwZXMuICovXG5leHBvcnQgdHlwZSBEZWx0YVxuICAgID0gSVN0YXJ0RGVsdGFcbiAgICB8IElPcmRlckRlbHRhXG4gICAgfCBJUmFuRGVsdGFcbiAgICB8IElGaW5pc2hlZERlbHRhXG4gICAgfCBJRGlzY29ubmVjdERlbHRhXG4gICAgfCBJT3ZlckRlbHRhO1xuIl19